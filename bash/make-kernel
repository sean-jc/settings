. $SETTINGS/bash/utils

function make-kernel() {
	if [[ $# -lt 1 ]]; then
		printf "Must specify the command\n"
		return 1
	fi
	if [[ $# -gt 2 ]]; then
		printf "Maximum of 2 arguments supported: command (1) and kernel (2)\n"
		return 2
	fi
	if [[ $# -eq 1 ]]; then
		if [[ $1 == "make" ]]; then
			printf "Use make-host (mh) for local build\n"
			return 3
		fi
		if [[ ! -f REPORTING-BUGS ]]; then
			printf "Local build without REPORTING-BUGS\n"
			return 3
		elif [[ ! -f .config ]]; then
			printf "Local build without local config\n"
			return 3
		elif [[ -f .git/info/sparse-checkout && ! -f .config ]]; then
			printf "Local build with sparse directory\n"
			return 3
		fi
		if [[ $1 == "htmldocs" ]]; then
			make htmldocs SPHINXOPTS=-v
		else
			make $1
		fi
		return 0
	fi

	if [[ ! -d $HOME/build/kernel/$2 ]]; then
		printf "Target build directory '$HOME/build/kernel/$2' does not exist\n"
		return 4
	elif [[ ! -d .git/info || ! -d kernel ]]; then
		printf "Must run from a top-level Linux repository\n"
		return 4
	elif [[ ! -f .git/info/sparse-checkout ]]; then
		printf "Remote build without sparse directory\n"
		return 4
	elif [[ -f REPORTING-BUGS ]]; then
		printf "Remote build with probable host directory (detected REPORTING-BUGS)\n"
		return 4
	elif [[ -f .config ]]; then
		printf "Remote build with local config\n"
		return 4
	fi

	if [[ -d $HOME/build/kernel/$2/source ]]; then
		local prev=$(readlink -f $HOME/build/kernel/$2/source)
		local curr=$(readlink -f $PWD)
		if [[ $prev != $curr ]]; then
			printf "Mismatch in build's previous source dir\n"
			return 5
		fi
	fi

	local ret
	if [[ $1 == "make" ]]; then
		local name="-$(git show -s --pretty='tformat:%h')-$(git rev-parse --abbrev-ref HEAD)-$2"

		if [[ -z $ARCH ]]; then
			make W=1 LOCALVERSION=$name O=$HOME/build/kernel/$2 $EXTRAS -j$(get-nr-cpus)
		else
			make LOCALVERSION=$name O=$HOME/build/kernel/$2 $EXTRAS -j$(get-nr-cpus)
		fi
		
		ret=$?
		if [[ $ret -eq 0 ]]; then
			rm -rf $HOME/build/kernel/$2/lib/modules/*
			make O=$HOME/build/kernel/$2 INSTALL_MOD_PATH=$HOME/build/kernel/$2 modules_install
		fi
	else
		if [[ $1 == "htmldocs" ]]; then
			printf "'htmldocs' isn't supported for sparse trees\n"
			return 6
		fi
		make O=$HOME/build/kernel/$2 $1
		ret=$?
# /usr/bin/python3 /usr/bin/sphinx-build -j128 -b html -c /usr/local/google/home/seanjc/go/src/kernel.org/linux/Documentation -d /usr/local/google/home/seanjc/build/kernel/docs/Documentation/output/.doctrees -D version=6.2.0-rc3 -D release= -D kerneldoc_srctree=/usr/local/google/home/seanjc/go/src/kernel.org/linux -D kerneldoc_bin=/usr/local/google/home/seanjc/go/src/kernel.org/linux/scripts/kernel-doc -q /usr/local/google/home/seanjc/go/src/kernel.org/linux/Documentation /usr/local/google/home/seanjc/build/kernel/docs/Documentation/output
	fi

	return $ret
}

function cc-make() {
	if [[ -z $CC_ARCH ]]; then
		printf "Must define 'CC_ARCH'\n"
		return 1
	fi
	if [[ $1 == "make-kernel" ]]; then
		CROSS_COMPILE=$TOOLCHAINS/$CC_ARCH-linux/bin/$CC_ARCH-linux- $@
	else
		if [[ $CC_ARCH == "s390" ]]; then
			CROSS_COMPILE=s390x-linux-gnu- $@
		else
			CROSS_COMPILE=$CC_ARCH-linux-gnu- $@
		fi
	fi
}

function make-x86() {
	$@
}
function make-clang() {
	LLVM=1 $@
}
function make-arm() {
	ARCH=arm64 CC_ARCH=aarch64 cc-make $@
}
function make-mips() {
	ARCH=mips CC_ARCH=mips64 cc-make $@
}
function make-ppc() {
	ARCH=powerpc CC_ARCH=powerpc64 cc-make $@
}
function make-riscv() {
	ARCH=riscv CC_ARCH=riscv64 cc-make $@
}
function make-loong() {
	ARCH=loongarch CC_ARCH=loongarch64 cc-make $@
}
function make-s390() {
	ARCH=s390 CC_ARCH=s390 cc-make $@
}
alias ma='make-arm make'
alias ja='make-clang make-arm make'
alias mah='make-arm make headers_install'

alias mr='make-riscv make'
alias jr='make-clang make-riscv make'
alias mrh='make-riscv make headers_install'

alias ms='make-s390 make'
alias js='make-clang make-s390 make'
alias msh='make-s390 make headers_install'

# Make Custom kernel
alias mc='make-kernel make'
alias mh='make headers_install'
alias msp='EXTRAS="C=1" make-kernel make'
alias md='make-kernel htmldocs'
alias ml='make-kernel localmodconfig'
alias mm='make-kernel menuconfig'
alias mo='make-kernel oldconfig'
alias me='make-kernel clean'

function make-kernel-clang() {
	make-clang make-kernel $@
}
alias jc='make-kernel-clang make'
alias jcc='make-kernel-clang make c'
alias jsp='EXTRAS="C=1" make-kernel-clang'
alias jl='make-kernel-clang localmodconfig'
alias jm='make-kernel-clang menuconfig'
alias jo='make-kernel-clang oldconfig'
alias je='make-kernel-clang clean'

function make-kernel-arm() {
	make-arm make-kernel $@
}
alias amc='make-kernel-arm make cc_arm'
alias amd='make-kernel-arm defconfig cc_arm'
alias ame='make-kernel-arm clean cc_arm'
alias amm='make-kernel-arm menuconfig cc_arm'
alias amo='make-kernel-arm oldconfig cc_arm'

function make-kernel-loong() {
	make-loong make-kernel $@
}
alias lmc='make-kernel-loong make cc_loong'
alias lmd='make-kernel-loong defconfig cc_loong'
alias lme='make-kernel-loong clean cc_loong'
alias lmm='make-kernel-loong menuconfig cc_loong'
alias lmo='make-kernel-loong oldconfig cc_loong'

function make-kernel-mips() {
	make-mips make-kernel $@
}
alias mmc='make-kernel-mips make cc_mips64'
alias mmd='make-kernel-mips defconfig cc_mips64'
alias mme='make-kernel-mips clean cc_mips64'
alias mmm='make-kernel-mips menuconfig cc_mips64'
alias mmo='make-kernel-mips oldconfig cc_mips64'

function make-kernel-ppc() {
	make-ppc make-kernel $@
}
alias pmc='make-kernel-ppc make cc_ppc64'
alias pmd='make-kernel-ppc defconfig cc_ppc64'
alias pme='make-kernel-ppc clean cc_ppc64'
alias pmm='make-kernel-ppc menuconfig cc_ppc64'
alias pmo='make-kernel-ppc oldconfig cc_ppc64'

alias emc='make-kernel-ppc make cc_e500mc'
alias emd='make-kernel-ppc defconfig cc_e500mc'
alias eme='make-kernel-ppc clean cc_e500mc'
alias emm='make-kernel-ppc menuconfig cc_e500mc'
alias emo='make-kernel-ppc oldconfig cc_e500mc'

function make-kernel-riscv() {
	make-riscv make-kernel $@
}
alias rmc='make-kernel-riscv make cc_riscv'
alias rmd='make-kernel-riscv defconfig cc_riscv'
alias rme='make-kernel-riscv clean cc_riscv'
alias rmm='make-kernel-riscv menuconfig cc_riscv'
alias rmo='make-kernel-riscv oldconfig cc_riscv'

function make-kernel-s390() {
	make-s390 make-kernel $@
}
alias smc='make-kernel-s390 make cc_s390'
alias smd='make-kernel-s390 defconfig cc_s390'
alias smm='make-kernel-s390 menuconfig cc_s390'
alias smo='make-kernel-s390 oldconfig cc_s390'

alias xmc='make-kernel make cc_x86'
alias xmd='make-kernel defconfig cc_x86'
alias xmm='make-kernel menuconfig cc_x86'
alias xmo='make-kernel oldconfig cc_x86'

alias mkc='make-kernel-range clang make'
alias mkcc='make-kernel-range clang clean'
alias mkf='make-kernel-range fast make'
alias mkfc='make-kernel-range fast clean'
alias mkv='make-kernel-range vm make'
alias mkvc='make-kernel-range vm clean'
alias mkx='make-kernel-range x86 make'
alias mkxc='make-kernel-range x86 clean'
alias mkg='make-kernel-range gpu make'
alias mkgc='make-kernel-range gpu clean'
alias mka='make-kernel-range all make'
alias mkac='make-kernel-range all clean'
alias mkt='make-kernel-range tests-x86 ign'
alias mat='make-kernel-range tests-arm ign'
alias mrt='make-kernel-range tests-riscv ign'
alias mst='make-kernel-range tests-s390 ign'
alias mut='make-kernel-range kut ign'

alias mkb='TARGET=bzImage make-kernel make'

function generate-x86-configs() {
	pushd $HOME/go/src/kernel.org/linux
	mo vm

	cp $HOME/build/kernel/vm/.config $SETTINGS/kconfigs/vm.config
	cp $HOME/build/kernel/vm/.config $HOME/build/kernel/clang/.config

	./scripts/kconfig/merge_config.sh -O $HOME/build/kernel/all $SETTINGS/kconfigs/vm.config $SETTINGS/kconfigs/all.config
	./scripts/kconfig/merge_config.sh -O $HOME/build/kernel/pae $SETTINGS/kconfigs/vm.config $SETTINGS/kconfigs/pae.config
	./scripts/kconfig/merge_config.sh -O $HOME/build/kernel/up  $SETTINGS/kconfigs/vm.config $SETTINGS/kconfigs/up.config
	./scripts/kconfig/merge_config.sh -O $HOME/build/kernel/gpu  $SETTINGS/kconfigs/vm.config $SETTINGS/kconfigs/gpu.config
	./scripts/kconfig/merge_config.sh -O $HOME/build/kernel/nok  $SETTINGS/kconfigs/vm.config $SETTINGS/kconfigs/no_kvm.config

	LLVM=1 ./scripts/kconfig/merge_config.sh -O $HOME/build/kernel/clang_all $SETTINGS/kconfigs/vm.config $SETTINGS/kconfigs/all.config
	LLVM=1 ./scripts/kconfig/merge_config.sh -O $HOME/build/kernel/clang_pae $SETTINGS/kconfigs/vm.config $SETTINGS/kconfigs/pae.config
	LLVM=1 ./scripts/kconfig/merge_config.sh -O $HOME/build/kernel/clang_up  $SETTINGS/kconfigs/vm.config $SETTINGS/kconfigs/up.config
	LLVM=1 ./scripts/kconfig/merge_config.sh -O $HOME/build/kernel/clang_gpu $SETTINGS/kconfigs/vm.config $SETTINGS/kconfigs/gpu.config
	LLVM=1 ./scripts/kconfig/merge_config.sh -O $HOME/build/kernel/clang_nok $SETTINGS/kconfigs/vm.config $SETTINGS/kconfigs/no_kvm.config
	popd
}
alias xk='generate-x86-configs'

function time-kernel() {
	if [[ $# -ne 1 ]]; then
		printf "Must specify the target kernel name\n"
		return 1
	fi
	make O=$HOME/build/kernel/$1 clean
	sleep .25
	ftime -o $HOME/build/kernel/$1/tk_time.log make -j$(get-nr-cpus) O=$HOME/build/kernel/$1 > $HOME/build/kernel/$1/tk_build.log 2>&1
}
alias tik='time-kernel'

function clean-modules() {
	local dirs=( $(/bin/ls -1 $HOME/build/kernel) )
	local i

	for i in "${dirs[@]}"; do
		rm -rf "$HOME/build/kernel/$i/lib/modules"
	done
}
alias cmod=clean-modules