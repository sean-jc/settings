. $SETTINGS/bash/utils

function modprobe-kvm-all {
	local nr_cpus=$(get-nr-cpus)
	for i in $(seq 1 $nr_cpus); do
		modprobe-kvm-loop > /dev/null 2>&1 &
	done
}
alias mpka='modprobe-kvm-all'

function get-kvm() {
	if is-amd; then
		printf "kvm_amd"
	else
		printf "kvm_intel"
	fi
}

function modprobe-kvm-vendor() {
	local params
	if is-amd; then
		params="avic=1 nested=1"
	else
		params="warn_on_missed_cc=1"
	fi
	psudo modprobe $(get-kvm) $params $@
}

alias mpkk='psudo modprobe kvm force_emulation_prefix=2'
alias mpk='mpkk && modprobe-kvm-vendor'
alias mpkr='psudo modprobe $(get-kvm)'
alias mpi='psudo modprobe vfio_pci'

function set-fep() {
	if [[ $(cat /sys/module/kvm/parameters/force_emulation_prefix) != "$1" ]]; then
		printf "Changing FEP to '%u'\n" $1
		echo $1 | psudo tee -a /sys/module/kvm/parameters/force_emulation_prefix > /dev/null
	fi
}
alias fep='set-fep'

function rmmod-safe() {
	while lsmod | grep -q $1 ; do
		if psudo rmmod $1; then
			break
		fi
		echo "Failed to unload $1.ko, sleeping and retrying"
		sleep 1
	done

}
alias rmk='rmmod-safe $(get-kvm)'
alias rmkk='rmk && rmmod-safe kvm'

alias rmi='rmmod-safe vfio_pci && rmmod-safe vfio_iommu_type1 && rmmod-safe vfio_pci_core && rmmod vfio'
alias rma='rmv && rmkk && rmmod-safe irqbypass'

alias bindi="mpi && echo 1ae0 0050 > /sys/bus/pci/drivers/vfio-pci/new_id"

function reload-kvm() {
	if [[ $# -eq 2 ]]; then
		rmkk
	else
		rmk
	fi
	mpkr $1
}

function config-priv-file() {
	local perm=660
	if [[ $# -eq 2 ]]; then
		perm=$2
	fi

	if [[ ! $(stat $1) ]]; then
		die "Cannot stat $1"
	fi
	if [[ $(grep $(stat -c "%g" $1) /etc/group | cut -f 1 -d :) != "kvm" ]]; then
		psudo chown root:kvm $1
	fi
	if [[ $(stat -c "%a" $1) != "$perm" ]]; then
		psudo chmod $perm $1
	fi
}

function probe-modules() {
	if [[ $# -ne 1 && $# -ne 2 ]]; then
		printf "USAGE: probe-modules <qemu> [setcaps]\n"
		return 1
	fi

	# Allow up to 64gb worth of on-demand hugeTLB 2MiB pages.
	if [[ $(cat /proc/sys/vm/nr_overcommit_hugepages) != "32768" ]]; then
		echo 32768 | sudo tee /proc/sys/vm/nr_overcommit_hugepages
	fi
	if [[ -d /sys/devices/system/node/node0 ]]; then
		if [[ $(cat /sys/devices/system/node/node0/hugepages/hugepages-1048576kB/nr_hugepages) != "8" ]]; then
			echo 8 > /sys/devices/system/node/node0/hugepages/hugepages-1048576kB/nr_hugepages
		fi
		if [[ $(cat /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages) != "4096" ]]; then
			echo 4096 > /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages
		fi
	fi

	kvm_params=""
	qemu=$1

	kvm=$(get-kvm)
	if is-amd; then
		kvm_params="avic=1"

		if [[ -f /sys/module/kvm_amd/parameters/sev ]]; then
			grep -q Y /sys/module/kvm_amd/parameters/sev
			if [[ $? -eq 0 && ! -c /dev/sev ]]; then
				udevadm test /devices/virtual/misc/sev
				if [[ ! -c /dev/sev ]]; then
					ln -s /mnt/devtmpfs/sev /dev/sev
				fi

				lmod=$(lsmod | cut -f 1 -d ' ' | grep ccp)
				if [[ $? -eq 0 ]]; then
					psudo modprobe ccp init_ex_path=/var/google/persistent/bios/psp_nv_data psp_init_on_probe=1
				fi
			fi
		fi
	fi

	lmod=$(lsmod | cut -f 1 -d ' ' | grep kvm_)
	if [[ $? -eq 0 && $lmod != $kvm* ]]; then
		psudo rmmod $lmod
	fi
	if [[ ! $(lsmod | cut -f 1 -d ' ' | grep kvm_) ]]; then
		psudo modprobe $kvm $kvm_params nested=1
	fi
	if [[ ! $(lsmod | cut -f 1 -d ' ' | grep vhost_net) ]]; then
		psudo modprobe vhost_net
	fi

	if [[ -n $NO_FEP ]]; then
		set-fep 0
	else
		set-fep 2
	fi

	if [[ ! -c /dev/vhost-net ]];then
		udevadm test /devices/virtual/misc/vhost-net
	fi

	if [[ $# -eq 2 && $EUID != 0 ]]; then
		config-priv-file /bin/ip 750
		config-priv-file /dev/kvm
		config-priv-file /dev/vhost-net
		if [[ -n $epc ]]; then
			config-priv-file /dev/sgx/virt_epc
			config-priv-file /dev/sgx/provision
		fi

		ip_bin=/bin/ip
		if [[ -f /home/sean/bin/ip ]]; then
			ip_bin=/home/sean/bin/ip
		fi

		qemu_bin=$(readlink -f /home/sean/build/qemu/$qemu)
		if [[ -z $(getcap $qemu_bin | grep cap_net_admin) ]]; then
			psudo setcap cap_net_admin=+ep $qemu_bin
		fi
		if [[ -z $(getcap $ip_bin | grep cap_net_admin) ]]; then
			psudo setcap cap_net_admin=+ep $ip_bin
		fi
		if [[ -z $(getcap /usr/bin/taskset | grep cap_sys_nice) ]]; then
			psudo setcap cap_sys_nice=+ep /usr/bin/taskset
		fi
	fi
}
