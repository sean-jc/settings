. $SETTINGS/bash/modules

function prep-kut32() {
	# ./configure --erratatxt="" --disable-pretty-print-stacks --arch=i386 --processor=i386
	probe-modules qemu
	cd ~/go/src/kernel.org/kut-32
	return 0
}

function prep-kut() {
	# ./configure --erratatxt="" --disable-pretty-print-stacks
	probe-modules qemu
	cd ~/go/src/kernel.org/kvm-unit-tests
	return 0
}

function prep-kut-efi() {
	# ./configure --erratatxt="" --disable-pretty-print-stacks --enable-efi
	probe-modules qemu
	cd ~/go/src/kernel.org/kut-efi
	return 0
}

alias rkt='prep-kut && QEMU=~/build/qemu/qemu EFI_UEFI=~/build/ovmf/OVMF.fd'
alias rku='rkt ./run_tests.sh -v'
alias rkt32='prep-kut32 && QEMU=~/build/qemu/qemu'
alias rku32='rkt32 ./run_tests.sh -v'
alias rkte='prep-kut-efi && QEMU=~/build/qemu/qemu EFI_UEFI=~/build/ovmf/OVMF.fd'
alias rkue='rkte ./run_tests.sh -v'
alias rkv='rkt TESTNAME=vmx TIMEOUT=90s ACCEL= ./x86/run x86/vmx.flat -smp 1 -cpu host,+vmx -append'
alias rkc='rkt TESTNAME=vmx_controls TIMEOUT=90s ACCEL= ./x86/run x86/vmx.flat -smp 1 -cpu host,+vmx -m 2560 -append vmx_controls_test'

function run-selftests() {
	local RED='\033[1;31m' # Bold Red
	local GREEN='\e[0;32m' # Bold Green
	local BROWN='\e[1;33m'  # Bold Brown
	local BLUE='\e[1;34m'  # Bold Blue
	local cyan='\033[0;36m' # Cyan
	local NOF='\033[0m' # No Format
	local tests=( $(/bin/ls -1 $HOME/build/selftests) )
	local ret
	local i

	probe-modules qemu

	for i in "${tests[@]}"; do
		local __stdout
		local __stderr

		printf "Running $i\n"

		if [[ $i == "max_guest_memory_test" && $(is-guest) ]]; then
			ret=4
		else
			catch __stdout __stderr $HOME/build/selftests/$i
			ret=$?
		fi

		if [[ $ret -eq 0 ]]; then
			printf "${GREEN}PASSED ${cyan}$i${NOF}\n"
		elif [[ $ret -eq 4 ]]; then
			printf "${BROWN}SKIPPED ${cyan}$i${NOF}\n"
		elif [[ $ret -eq 139 ]]; then
			printf "${RED}SEGFAULT ${cyan}$i${NOF}\n"
		else
			printf "${RED}FAILED ${cyan}$i${RED} : ret ='$ret'${NOF}\n"
			printf "$__stdout\n"
			printf "$__stderr\n"
		fi
		echo ""
	done
}
alias rt='run-selftests'

function run-gvisor {
	#!/bin/bash
	for i in $(seq 1 $1); do
		~/build/runc/runsc --platform=kvm --network=none do echo ok
	done
}
alias rung='run-gvisor 1000'

function run-nx-gvisor {
	local nr_cpus=$(get-nr-cpus)
	for i in $(seq 1 $nr_cpus); do
		run-gvisor 1000 > /dev/null 2>&1 &
	done

	for i in $(seq 1 100); do
		echo Y > /sys/module/kvm/parameters/nx_huge_pages
		sleep 1
		echo N > /sys/module/kvm/parameters/nx_huge_pages
		sleep 1
	done
}
alias runx='run-nx-gvisor'

function modprobe-kvm-loop {
	for i in $(seq 1 1000); do
		psudo modprobe kvm_intel
		psudo modprobe kvm_amd
		psudo rmmod kvm_amd
		psudo rmmod kvm_intel

		psudo modprobe kvm_amd
		psudo modprobe kvm_intel
		psudo rmmod kvm_intel
		psudo rmmod kvm_amd
	done
}

function run-one-selftest() {
	local GREEN='\e[0;32m' # Bold Green
	local BROWN='\e[1;33m'  # Bold Brown
	local BLUE='\e[1;34m'  # Bold Blue
	local cyan='\033[0;36m' # Cyan
	local NOF='\033[0m' # No Format

	local __stdout
	local __stderr
	local test=$1
	local log=$2

	if [[ $i == "max_guest_memory_test" && $(is-guest) ]]; then
		ret=4
	else
		catch __stdout __stderr $HOME/build/selftests/$i
		ret=$?
	fi

	if [[ $ret -eq 0 ]]; then
		printf "${GREEN}PASSED ${cyan}$i${NOF}\n" >> $log
	elif [[ $ret -eq 4 ]]; then
		printf "${BROWN}SKIPPED ${cyan}$i${NOF}\n" >> $log
	elif [[ $ret -eq 139 ]]; then
		printf "${RED}SEGFAULT ${cyan}$i${NOF}\n" >> $log
	else
		printf "${RED}FAILED ${cyan}$i${RED} : ret ='$ret'${NOF}\n" >> $log
		printf "$__stdout\n" >> $log
		printf "$__stderr\n" >> $log
	fi
	return $ret
}

function run-selftests-parallelized() {
	local RED='\033[1;31m' # Bold Red
	local GREEN='\e[0;32m' # Bold Green
	local BROWN='\e[1;33m'  # Bold Brown
	local BLUE='\e[1;34m'  # Bold Blue
	local cyan='\033[0;36m' # Cyan
	local NOF='\033[0m' # No Format

	local tests=( $(/bin/ls -1 $HOME/build/selftests) )
	local ret
	local i

	probe-modules qemu

	local pids=()
	for i in "${tests[@]}"; do
		run-one-selftest $i "$HOME/logs/$i.$1.log" &
		pids+=($!)
	done

	for i in "${!pids[@]}"; do
		local test=${tests[$i]}
		local pid=${pids[$i]}

		printf "Waiting for '$test', PID '$pid'\n"
		wait $pid 2>/dev/null

		ret=$?
		if [[ $ret -ne 0 ]]; then
			cat "$HOME/logs/$test.$1.log"
		fi
	done
}
alias rp='run-selftests-parallelized current 2>/dev/null'

function really-run-all-tests() {
	local GREEN='\e[0;32m' # Bold Green
	local NOF='\033[0m' # No Format

	printf "\n\n${GREEN}Running selftests with $1${NOF}\n"
	run-selftests-parallelized $@ 2>/dev/null

	printf "\n\n${GREEN}Running KUT with $1${NOF}\n"
	cd ~/go/src/kernel.org/kvm-unit-tests
	QEMU=~/build/qemu/qemu EFI_UEFI=~/build/ovmf/OVMF.fd ./run_tests.sh -j$(get-nr-cpus) > "$HOME/logs/kut.$1.log"
	#QEMU=~/build/qemu/qemu EFI_UEFI=~/build/ovmf/OVMF.fd ./run_tests.sh -j$(get-nr-cpus) -g nodefault
	grep FAIL "$HOME/logs/kut.$1.log"

	printf "\n\nRunning KUT EFI with $1${NOF}\n"
	cd ~/go/src/kernel.org/kut-efi
	QEMU=~/build/qemu/qemu EFI_UEFI=~/build/ovmf/OVMF.fd ./run_tests.sh -j$(get-nr-cpus) > "$HOME/logs/kut-efi.$1.log"
	grep FAIL "$HOME/logs/kut-efi.$1.log"
	#QEMU=~/build/qemu/qemu EFI_UEFI=~/build/ovmf/OVMF.fd ./run_tests.sh -j$(get-nr-cpus) -g nodefault

	printf "\n\nRunning KUT-32 with $1${NOF}\n"
	cd ~/go/src/kernel.org/kut-32
	QEMU=~/build/qemu/qemu EFI_UEFI=~/build/ovmf/OVMF.fd ./run_tests.sh -j$(get-nr-cpus) > "$HOME/logs/kut-32.$1.log"
	grep FAIL "$HOME/logs/kut-32.$1.log"
	# QEMU=~/build/qemu/qemu EFI_UEFI=~/build/ovmf/OVMF.fd ./run_tests.sh -j$(get-nr-cpus) -g nodefault
}
function run-all-tests() {
	local paging_param

	which gcontain
	if [[ $? -eq 0 ]]; then
		gcontain enter /
	fi

	rm -f $HOME/logs/*.log
	echo 0 | psudo tee /proc/sys/kernel/nmi_watchdog > /dev/null

	rmmod-kvm kvm
	probe-modules qemu
	really-run-all-tests tdp_enabled

	rmmod-kvm
	grep vendor_id "/proc/cpuinfo" | grep -q AuthenticAMD
	if [[ $? -eq 0 ]]; then
		psudo modprobe kvm_amd npt=0
	else
		psudo modprobe kvm_intel ept=0
	fi
	really-run-all-tests tdp_disabled
}
alias ra='run-all-tests'

function run-memslot-test() {
	if [[ $(id -u) -ne 0 ]]; then
		printf "Must be run as root\n"
		return 1
	fi
	if [[ $# -ne 0 && $# -ne 2 ]]; then
		printf "Usage for memslot test: 'rms [threads] [mem in gb]'\n"
		return 2
	fi
	if [[ ! -f /sys/bus/pci/devices/0000:00:02.0/rom ]]; then
		printf "No ROM at /sys/bus/pci/devices/0000:00:02.0, try roms=1\n"
		return 3
	fi

	local nr_threads=8
	local nr_gigabytes=1
	if [[ $# -eq 2 ]]; then
		nr_threads=$1
		nr_gigabytes=$2
	fi

	$SETTINGS/bin/memslot_test -c $nr_threads -m $nr_gigabytes -e $SETTINGS/utils/memslot_test/rom.sh
}
alias rms='run-memslot-test'
