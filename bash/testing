. $SETTINGS/bash/modules

function gcontain-enter() {
	which gcontain
	if [[ $? -eq 0 ]]; then
		gcontain enter /
	fi
}

function prep-kvm-unit-tests() {
	gcontain-enter

	probe-modules qemu
	export unittest_log_dir=~/logs/kut/$1/$(date +%Y.%m.%d.%H.%M)
	cd ~/build/kut/$1
}

function prep-kut32() {
	prep-kvm-unit-tests i386
}

function prep-kut() {
	prep-kvm-unit-tests x86
}

function prep-kut-efi() {
	prep-kvm-unit-tests efi
}

function run-kut() {
	ACCEL="kvm,kernel_irqchip=$1" QEMU=~/build/qemu/qemu EFI_UEFI=~/build/ovmf/OVMF.fd "${@:2}"
}

alias rks='prep-kut && run-kut split'
alias rkas='rks ./run_tests.sh -v'
alias rka='rkas -j$(get-nr-cpus)'

alias rkt='prep-kut && run-kut on'
alias rkus='rkt ./run_tests.sh -v'
alias rku='rkus -j$(get-nr-cpus)'

alias rks32='prep-kut32 && run-kut split'
alias rkas32='rks32 ./run_tests.sh -v'
alias rka32='rkas32 -j$(get-nr-cpus)'

alias rkt32='prep-kut32 && run-kut on'
alias rkus32='rkt32 ./run_tests.sh -v'
alias rku32='rkus32 -j$(get-nr-cpus)'

alias rkse='prep-kut-efi && rku-kut split'
alias rkase='rkse ./run_tests.sh -v'
alias rkae='rkase -j$(get-nr-cpus)'

alias rkte='prep-kut-efi && run-kut on'
alias rkuse='rkte ./run_tests.sh -v'
alias rkue='rkuse -j$(get-nr-cpus)'

function get-selftests-filtered() {
	/bin/ls -dl $1 | grep -E "^\-rwxr" | tr -s ' ' | cut -f 9 -d ' '
}

function get-selftests() {
	local arch=$(uname -m)
	if [[ $arch == "x86_64" ]]; then
		arch="x86"
	elif [[ $arch == "aarch64" ]]; then
		arch="arm"
	else
		printf "Unhandled tests architecture %s\n" $arch
		exit 1
	fi

	get-selftests-filtered "$HOME/build/selftests/$arch/*"
	get-selftests-filtered "$HOME/build/selftests/$arch/$arch/*"
}

function run-selftests() {
	local RED='\033[1;31m' # Bold Red
	local GREEN='\e[0;32m' # Bold Green
	local BROWN='\e[1;33m'  # Bold Brown
	local BLUE='\e[1;34m'  # Bold Blue
	local cyan='\033[0;36m' # Cyan
	local NOF='\033[0m' # No Format
	local tests=( $(get-selftests) )
	local ret
	local i

	probe-modules qemu

	for i in "${tests[@]}"; do
		local test=$(basename "$i")
		local __stdout
		local __stderr

		printf "Running $test\n"

		if [[ $test == "mmu_stress_test" && $(is-guest) ]]; then
			ret=4
		else
			catch __stdout __stderr $i
			ret=$?
		fi

		if [[ $ret -eq 0 ]]; then
			printf "${GREEN}PASSED ${cyan}$test${NOF}\n"
		elif [[ $ret -eq 4 ]]; then
			printf "${BROWN}SKIPPED ${cyan}$test${NOF}\n"
		elif [[ $ret -eq 139 ]]; then
			printf "${RED}SEGFAULT ${cyan}$test${NOF}\n"
		else
			printf "${RED}FAILED ${cyan}$test${RED} : ret ='$ret'${NOF}\n"
			printf "$__stdout\n"
			printf "$__stderr\n"
		fi
		echo ""
	done
}
alias rt='run-selftests'

function run-gvisor {
	#!/bin/bash
	for i in $(seq 1 $1); do
		~/build/runc/runsc --platform=kvm --network=none do echo ok
	done
}
alias rung='run-gvisor 1000'

function run-nx-gvisor {
	local nr_cpus=$(get-nr-cpus)
	for i in $(seq 1 $nr_cpus); do
		run-gvisor 1000 > /dev/null 2>&1 &
	done

	for i in $(seq 1 100); do
		echo Y > /sys/module/kvm/parameters/nx_huge_pages
		sleep 1
		echo N > /sys/module/kvm/parameters/nx_huge_pages
		sleep 1
	done
}
alias runx='run-nx-gvisor'

function modprobe-kvm-loop {
	for i in $(seq 1 1000); do
		psudo modprobe kvm_intel
		psudo modprobe kvm_amd
		psudo rmmod kvm_amd
		psudo rmmod kvm_intel

		psudo modprobe kvm_amd
		psudo modprobe kvm_intel
		psudo rmmod kvm_intel
		psudo rmmod kvm_amd
	done
}

function run-one-selftest() {
	local GREEN='\e[0;32m' # Bold Green
	local BROWN='\e[1;33m'  # Bold Brown
	local BLUE='\e[1;34m'  # Bold Blue
	local cyan='\033[0;36m' # Cyan
	local NOF='\033[0m' # No Format
	local __stdout
	local __stderr
	local test=$(basename $1)
	local log=$2

	if [[ $test == "mmu_stress_test" && $(is-guest) ]]; then
		ret=4
	else
		catch __stdout __stderr $1
		ret=$?
	fi

	if [[ $ret -eq 0 ]]; then
		printf "${GREEN}PASSED ${cyan}$test${NOF}\n" >> $log
	elif [[ $ret -eq 4 ]]; then
		printf "${BROWN}SKIPPED ${cyan}$test${NOF}\n" >> $log
	elif [[ $ret -eq 139 ]]; then
		printf "${RED}SEGFAULT ${cyan}$test${NOF}\n" >> $log
	else
		printf "${RED}FAILED ${cyan}$test${RED} : ret ='$ret'${NOF}\n" >> $log
	fi
	printf "$__stdout\n" >> $log
	printf "$__stderr\n" >> $log
	return $ret
}

function run-selftests-parallelized() {
	local RED='\033[1;31m' # Bold Red
	local GREEN='\e[0;32m' # Bold Green
	local BROWN='\e[1;33m'  # Bold Brown
	local BLUE='\e[1;34m'  # Bold Blue
	local cyan='\033[0;36m' # Cyan
	local NOF='\033[0m' # No Format
	local tests=( $(get-selftests) )
	local ret
	local i

	probe-modules qemu

	local pids=()
	for i in "${tests[@]}"; do
		local test=$(basename $i)
		run-one-selftest $i "$HOME/logs/$test.$1.log" &
		pids+=($!)
	done

	for i in "${!pids[@]}"; do
		local test=$(basename ${tests[$i]})
		local pid=${pids[$i]}

		printf "Waiting for '$test', PID '$pid'\n"
		wait $pid 2>/dev/null

		ret=$?
		if [[ $ret -ne 0 ]]; then
			if [[ $ret -eq 4 ]]; then
				printf "${BROWN}SKIPPED ${cyan}$test${NOF} "
				sed -n -e 's/^.*Requirement not met//p' "$HOME/logs/$test.$1.log"
			elif [[ $ret -eq 139 ]]; then
				printf "${RED}SEGFAULT ${cyan}$test${NOF}\n"
			else
				printf "${RED}FAILED ${cyan}$test${RED} : ret ='$ret'${NOF}\n"
				cat "$HOME/logs/$test.$1.log"
			fi
		fi
	done
}

function run-selftests-parallelized-current() {
	rm -f $HOME/logs/*.current.log

	gcontain-enter
	run-selftests-parallelized current 2>/dev/null
}
alias rp='run-selftests-parallelized-current'

function really-run-all-tests() {
	local GREEN='\e[0;32m' # Bold Green
	local NOF='\033[0m' # No Format

	printf "\n\n${GREEN}Running selftests with $1${NOF}\n"
	run-selftests-parallelized $@ 2>/dev/null

	printf "\n\n${GREEN}Running KUT with split IRQCHIP and $1${NOF}\n"
	cd $HOME/build/kut/x86
	unittest_log_dir=$HOME/logs/kut-split.$1.logs run-kut split ./run_tests.sh -j$(get-nr-cpus) > "$HOME/logs/kut-split.$1.log"
	grep FAIL "$HOME/logs/kut-split.$1.log"

	if [[ $RUN_KVM_TESTS != "supershort" ]]; then
		printf "\n\n${GREEN}Running KUT with in-kernel IRQCHIP and $1${NOF}\n"
		cd $HOME/build/kut/x86
		unittest_log_dir=$HOME/logs/kut.$1.logs run-kut on ./run_tests.sh -j$(get-nr-cpus) > "$HOME/logs/kut.$1.log"
		# run-kut on ./run_tests.sh -j$(get-nr-cpus) -g nodefault > "$HOME/logs/kut.$1.log"
		grep FAIL "$HOME/logs/kut.$1.log"

		printf "\n\nRunning KUT EFI with $1${NOF}\n"
		cd $HOME/build/kut/efi
		unittest_log_dir=$HOME/logs/kut-efi.$1.logs run-kut on ./run_tests.sh -j$(get-nr-cpus) > "$HOME/logs/kut-efi.$1.log"
		grep FAIL "$HOME/logs/kut-efi.$1.log"

		printf "\n\nRunning KUT-i386 with $1${NOF}\n"
		cd $HOME/build/kut/i386
		unittest_log_dir=$HOME/logs/kut-i386.$1.logs run-kut on ./run_tests.sh -j$(get-nr-cpus) > "$HOME/logs/kut-i386.$1.log"
		grep FAIL "$HOME/logs/kut-i386.$1.log"
	fi
}
function run-all-tests() {
	local paging_param

	gcontain-enter

	rm -f $HOME/logs/*.log
	echo 0 | psudo tee /proc/sys/kernel/nmi_watchdog > /dev/null

	probe-modules qemu

	if [[ $# -gt 0 ]]; then
		local params=$1
		if is-amd; then
			params="$params " "avic=1 nested=1"
		fi

		reload-kvm $params

		really-run-all-tests $2
		egrep "FAIL|FAILED" ~/logs/*.log
		return $?
	fi

	if is-amd; then
		reload-kvm "avic=1 nested=1"
	else
		reload-kvm
	fi
	really-run-all-tests tdp_enabled

	if is-amd; then
		reload-kvm "npt=0 avic=1 nested=1"
		really-run-all-tests npt_disabled
	else
		reload-kvm "ept=0"
		really-run-all-tests ept_disabled
	fi

	if [[ $RUN_KVM_TESTS == "all" ]]; then
		grep vendor_id "/proc/cpuinfo" | grep -q AuthenticAMD
		if [[ $? -eq 0 ]]; then
			if [[ $(grep -q Y /sys/module/kvm_enable/parameters/avic) -eq 0 ]]; then
				reload-kvm "avic=0 nested=1"
				really-run-all-tests avic_disabled
			fi
		else
			reload-kvm "eptad=0"
			really-run-all-tests eptad_disabled

			reload-kvm "unrestricted_guest=0"
			really-run-all-tests urg_disabled

			if [[ $(grep -q Y /sys/module/kvm_intel/parameters/enable_ipiv) -eq 0 ]]; then
				reload-kvm "enable_ipiv=0"
				really-run-all-tests ipiv_disabled
			fi

			if [[ $(grep -q Y /sys/module/kvm_intel/parameters/enable_apicv) -eq 0 ]]; then
				reload-kvm "enable_apicv=0"
				really-run-all-tests apicv_disabled
			fi
		fi
	fi

	egrep "FAIL|FAILED" ~/logs/*.log
}
alias ra='RUN_KVM_TESTS=all run-all-tests'
alias rs='RUN_KVM_TESTS=short run-all-tests'
alias rss='RUN_KVM_TESTS=supershort run-all-tests'
alias rsm='RUN_KVM_TESTS=supershort run-all-tests enable_mediated_pmu=Y mediated_pmu'
alias rssm='RUN_KVM_TESTS=supershort run-all-tests enable_mediated_pmu=Y mediated_pmu'


function run-memslot-test() {
	if [[ $(id -u) -ne 0 ]]; then
		printf "Must be run as root\n"
		return 1
	fi
	if [[ $# -ne 0 && $# -ne 2 ]]; then
		printf "Usage for memslot test: 'rms [threads] [mem in gb]'\n"
		return 2
	fi
	if [[ ! -f /sys/bus/pci/devices/0000:00:02.0/rom ]]; then
		printf "No ROM at /sys/bus/pci/devices/0000:00:02.0, try roms=1\n"
		return 3
	fi

	local nr_threads=8
	local nr_gigabytes=1
	if [[ $# -eq 2 ]]; then
		nr_threads=$1
		nr_gigabytes=$2
	fi

	$SETTINGS/bin/memslot_test -c $nr_threads -m $nr_gigabytes -e $SETTINGS/utils/memslot_test/rom.sh
}
alias rms='run-memslot-test'
