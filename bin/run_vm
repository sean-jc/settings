#!/bin/bash
if [[ $# -lt 2 ]]; then
    printf "Must specify the qemu build and target image\n"
    exit 1
fi

if [[ $# -gt 3 ]]; then
    printf "Maximum of 3 arguments supported: qemu (1), image (2) and kernel (3)\n"
    exit 1
fi

# Allow up to 64gb worth of on-demand hugeTLB pages.
if [[ $(cat /proc/sys/vm/nr_overcommit_hugepages) != "32768" ]]; then
    echo 32768 | sudo tee /proc/sys/vm/nr_overcommit_hugepages
fi

maxcpus=$(grep -c '^processor' /proc/cpuinfo)
if [[ -z $cpus ]]; then
    cpus=$maxcpus
elif [[ $maxcpus -lt $cpus ]]; then
    pin=n
fi

if [[ $pin != "n" ]]; then
    cgroup=$(grep ^cgroup /proc/mounts | grep cpuset | grep -v root | cut -f 2 -d ' ')
    if [[ ! -d $cgroup ]]; then
        printf "Cannot find cpuset mount point, got '$cgroup'\n"
        exit 1
    fi

    cgroup="$cgroup/vm"
    if [[ ! -d $cgroup ]]; then
        sudo mkdir $cgroup
        if [[ $(id -u) -ne 0 ]]; then
            sudo chown sean:sean $cgroup/*
        fi
    fi
    echo "$((maxcpus-cpus))-$((maxcpus-1))" > $cgroup/cpuset.cpus
    echo "0" > $cgroup/cpuset.mems
    echo $BASHPID > $cgroup/cgroup.procs
fi

cgroup=$(grep ^cgroup /proc/mounts | grep memory | grep -v root | cut -f 2 -d ' ')
if [[ ! -d $cgroup ]]; then
    cgroup="/dev/cgroup/memory"
    if [[ ! -d $cgroup ]]; then
        printf "Cannot find memory cgroup mount point, got '$cgroup'\n"
        exit 1
    fi
fi
cgroup="$cgroup/vm"
if [[ ! -d $cgroup ]]; then
    sudo mkdir $cgroup
    if [[ $(id -u) -ne 0 ]]; then
        sudo chown sean:sean $cgroup/*
    fi
fi
echo $BASHPID > $cgroup/cgroup.procs

if [[ $# -eq 1 ]]; then
    qemu=$1 img=$2 exec virtualmachine
elif [[ -s $v2_cgroup ]]; then
    qemu=$1 img=$2 kernel=$3 cpus=$cpus append="cgroup_no_v1=$v2_cgroup" exec virtualmachine
else
    qemu=$1 img=$2 kernel=$3 cpus=$cpus exec virtualmachine
fi
