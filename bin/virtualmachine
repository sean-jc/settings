#!/bin/bash
if [[ -z $img ]]; then
    printf "Must specify the image name via: \$img.\n"
    exit 2
fi

if [[ -z $qemu ]]; then
    printf "Must specify the qemu build via: \$qemu.\n"
    exit 2
fi


if [[ -z $cpus ]]; then
    printf "Must specify the number of cpus via: \$cpus.\n"
    exit 2
fi

if [[ -n $iso && -n $kernel ]]; then
    printf "Cannot specify both \$iso and \$kernel.\n"
    exit 2
fi

if [[ -z $kernel && -n $append ]]; then
    printf "Cannot specify \$append without \$kernel.\n"
    exit 2
fi

# img=/home/sean/images/qemu/ubuntu-16.04-server-$1.img
# boot=$2
# kernel=$3

if [[ $os = "hyper-v" ]]; then
    mac="00:16:3E:68:00:FF"
else
    mac=$(ifconfig | grep br0 | grep 00:16:3e:68:00:)
    if [[ -n $mac ]]; then
        mac="0x$(echo $mac | tr -s ' ' | cut -f 5 -d ' ' | cut -f 6 -d :)"
        mac=$((mac + 16))
    else
        mac="0"
    fi
    mac=$(printf "00:16:3E:68:00:%02x" $((mac + $(ifconfig | grep -c -e "tap[0-9]"))))
fi

if [[ $os = "hyper-v" ]]; then
    img=/home/sean/images/qemu/hyper-v-2016-$img.img
else
    img=/home/sean/images/qemu/ubuntu-16.04-server-$img.img
fi

qemu=/home/sean/build/qemu/$qemu/x86_64-softmmu/qemu-system-x86_64
ifup=$(which ifup)

common="-enable-kvm -machine q35,accel=kvm,kernel_irqchip -smp $cpus -device virtio-net-pci,netdev=net0,mac=$mac -netdev tap,id=net0,script=$ifup,downscript=no,vhost=on"

mem="-m 16G"
if [[ $(free -g | grep Mem: | tr -s ' ' | cut -f 2 -d ' ') -lt 17 ]]; then
    if [[ $os = "hyper-v" ]]; then
        printf "Not enough memory to start Hyper-V\n"
        exit 2
    fi
    mem="-m 8G"
fi

if [[ -n $sgx ]]; then
    mem="$mem -sgx epc=$sgx"
fi

if [[ $os = "hyper-v" ]]; then
    cpu="-cpu host,hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time,+vmx"
else
    cpu="-cpu host -bios /usr/share/ovmf/OVMF.fd"
fi

if [[ $display = "vnc" ]]; then
    display="-vga std -display vnc=:5900"
else
    display="-nographic"
    if [[ $daemon != "false" ]]; then
        display="$display -serial null -monitor null -parallel null"
    fi
fi
if [[ $daemon != "false" ]]; then
    extra="-daemonize"
fi

if [[ $virtio = "false" ]]; then
    os="-hda $img"
    append="root=/dev/sda1 rootfstype=ext4 $append"
else
    os="-drive file=$img,if=virtio"
    append="root=/dev/vda1 rootfstype=ext4 $append"
fi

if [[ -n $iso ]]; then
    os="$os -drive file=$iso,index=0,media=cdrom -boot d"
elif [[ -n $kernel ]]; then
    append="quiet console=tty1 console=ttyS0 earlyprintk=ttyS0 net.ifnames=0 loglevel=8 $append"
    os="$os -kernel /home/sean/build/kernel/$kernel/arch/x86_64/boot/bzImage -virtfs local,path=/home/sean/build/kernel/$kernel/lib/modules,security_model=passthrough,mount_tag=kmodules"
fi
if [[ -n $iso1 ]]; then
    os ="$os -drive file=$iso1,index=1,media=cdrom"
fi

if [[ -n $kernel ]]; then
    sudo -E $qemu $common $cpu $mem $display $os $extra -append "$append"
else
    sudo -E $qemu $common $cpu $mem $display $os $extra
fi
