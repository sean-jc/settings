#!/bin/bash
. $SETTINGS/bash/modules

trap "exit 1" TERM
export VM_PID=$$

set -m

function die() {
	printf "%s\n" "$1"
	kill -s TERM $VM_PID
}

if [[ -z $img && -z $unittest ]]; then
	die "Must specify the image name via: \$img"
fi

if [[ -z $qemu ]]; then
	die "Must specify the qemu build via: \$qemu"
fi

if [[ -z $cpus ]]; then
	die "Must specify the number of cpus via: \$cpus\n"
fi

if [[ -n $iso && -n $kernel ]]; then
	die "Cannot specify both \$iso and \$kernel\n"
fi

if [[ -z $kernel && -n $append ]]; then
	die "Cannot specify \$append without \$kernel\n"
fi

probe-modules $qemu y

qemu="$HOME/build/qemu/$qemu"
qemu_bin=$(readlink -f $qemu)

if [[ $os = "hyper-v" ]]; then
	mac="00:16:3E:68:00:FF"
else
	mac=$(ifconfig | grep -A 4 br0 | grep -o 00:16:3e:68:00:[0-9a-f][0-9a-f] | cut -f 6 -d :)
	if [[ -n $mac ]]; then
		mac=$(("0x$mac" + 16))
	elif [[ -n $i386 ]]; then
		mac="0x80"
	elif [[ $HOSTPOST = "purgatory" ]]; then
		mac="0x40"
	else
		mac="0"
	fi
	mac=$(printf "00:16:3E:68:00:%02x" $((mac + $(ifconfig | grep -c -e "tap[0-9]"))))
fi

if [[ -n $mbr ]]; then
	img=$HOME/images/qemu/bios/$img.img
else
	img=$HOME/images/qemu/$img.img
fi

qemu="$qemu -name debug-threads=on"
if [[ -n $gdb ]]; then
	qemu="$qemu -s -S"
fi
if [[ -z $reboot ]]; then
	qemu="$qemu -no-reboot"
fi

if [[ $iommu = "v" ]]; then
	iommu="-device virtio-iommu-pci"
elif [[ $iommu = "a" ]]; then
	iommu="-device amd-iommu"
elif [[ $iommu = "i" ]]; then
	iommu="-device intel-iommu"
fi
if [[ -n $iommu || -n $sev ]]; then
	virtio_opt="disable-legacy=on,iommu_platform=on"
elif [[ -n $i386 ]]; then
	virtio_opt="disable-modern=on,disable-legacy=off,iommu_platform=off"
else
	virtio_opt="iommu_platform=off"
fi
if [[ -z $roms ]]; then
	virtio_opt="$virtio_opt,romfile="
fi

if [[ $vnet != "n" ]]; then
	ifconfig -a | grep -q br0
	if [[ $? -eq 0 ]]; then
		ifup=br0
	else
		ifconfig -a | grep -q tap0
		if [[ $? -eq 0 ]]; then
			ifup=tap0
		fi
	fi
	if [[ -z $ifup ]]; then
		die "Cannot find br0 or tap0\n"
	fi
	ifup=$(which ifup_"$ifup")
	if [[ $? -ne 0 ]]; then
		die "Cannot find ifup_$ifup script"
	fi
	net="-device virtio-net-pci,netdev=net0,mac=$mac,$virtio_opt -netdev tap,id=net0,script=$ifup,downscript=no,vhost=on"
fi

if [[ -n $vfio ]]; then
	net="$net -device vfio-pci,host=$vfio"
fi

slots=0
if [[ -n $fd ]]; then
	slots=$((slots+1))
	mem="-object memory-backend-memfd,hugetlb=n,id=mem$slots,size=$fd""G -device pc-dimm,id=dimm$slots,memdev=mem$slots"
fi
if [[ -n $m2 ]]; then
	slots=$((slots+1))
	mem="$mem -object memory-backend-memfd,hugetlb=y,hugetlbsize=2M,id=mem$slots,size=$m2""G -device pc-dimm,id=dimm$slots,memdev=mem$slots"
fi
if [[ -n $m1 ]]; then
	slots=$((slots+1))
	mem="$mem -object memory-backend-memfd,hugetlb=y,hugetlbsize=1G,id=mem$slots,size=$m1""G -device pc-dimm,id=dimm$slots,memdev=mem$slots"
fi
if [[ -n $epc ]]; then
	for section in $epc; do
		slots=$((slots+1))
		mem="$mem -object memory-backend-epc,id=mem$slots,size=$section -sgx-epc id=epc$slots,memdev=mem$slots"
	done
fi

if [[ -n $mb ]]; then
	boot_mem="$mb""M"
elif [[ -n $gb ]]; then
	boot_mem="$gb""G"
elif [[ "$qemu_bin" =~ "i386" || -n $fd || -n $m2 || -n $m1 ]]; then
	boot_mem="1G"
else
	boot_mem="3G"
fi
mem="-m $boot_mem,slots=$slots,maxmem=256G $mem"
echo "$mem"

machine="-enable-kvm -smp $cpus,sockets=1 -machine q35,accel=kvm,pit=off,hpet=off"
if [[ -n $mach ]]; then
	machine="$machine,$mach"
fi
if [[ -n $td ]]; then
	machine="$machine,kvm-type=tdx,kernel_irqchip=split,guest-memory-protection=tdx,pic=off -object tdx-guest,id=tdx,debug"
elif [[ -n $ioapic ]]; then
	machine="$machine,kernel_irqchip=on"
else
	machine="$machine,kernel_irqchip=split"
fi
if [[ -n $sev ]]; then
	machine="$machine,memory-encryption=sev -object sev-guest,id=sev,policy=0,cbitpos=51,reduced-phys-bits=1"
fi
if [[ -n $es ]]; then
	machine="$machine,memory-encryption=sev -object sev-guest,id=sev,policy=4,cbitpos=51,reduced-phys-bits=1"
fi

if [[ $os = "hyper-v" ]]; then
	cpu="-cpu host,host-phys-bits,hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time,+vmx"
	bios="-bios $HOME/build/ovmf/OVMF$ovmf.fd"
else
	cpu="-cpu host,host-phys-bits,+invtsc"
	if [[ -z $migrate ]]; then
		cpu="$cpu,migratable=no"
	fi
	if [[ $x2apic == "false" || $x2apic == "n" ]]; then
		cpu="$cpu,-x2apic"
	fi
	if [[ "$qemu_bin" =~ "i386" ]]; then
		cpu="$cpu,-lm"
		bios="-bios $HOME/go/src/seabios.org/seabios/out/bios.bin"
	elif [[ -z $mbr ]]; then
		if [[ -n $sev || -n $es ]]; then
			bios="-drive if=pflash,format=raw,readonly,unit=0,file=$HOME/build/ovmf/OVMF_CODE$ovmf.fd"
			bios="$bios -drive if=pflash,format=raw,unit=1,file=$HOME/build/ovmf/OVMF_VARS$ovmf.fd"
		elif [[ -n $pflash ]]; then
			bios="-drive if=pflash,format=raw,readonly,unit=0,file=$HOME/build/ovmf/OVMF$ovmf.fd"
		elif [[ -n $td ]]; then
			bios="-device loader,file=$HOME/build/ovmf/OVMFTD$ovmf.fd,id=fd0"
		else
			bios="-bios $HOME/build/ovmf/OVMF$ovmf.fd"
		fi
		if [[ -n $debug_con ]]; then
			bios="$bios -debugcon file:debug.log -global isa-debugcon.iobase=0x402"
		fi
	fi
fi
if [[ -n $cpuid ]]; then
	cpu="$cpu,$cpuid"
fi
if [[ -n $hlt && $hlt != "n" ]]; then
	cpu="$cpu -overcommit cpu-pm=on"
fi

if [[ -n $vnc ]]; then
	display="-vga std -display vnc=:$vnc"
else
	display="-nographic"
	if [[ -z $vga ]]; then
		display="$display -vga none"
	fi
	if [[ -n $daemon ]]; then
		display="$display -serial null -monitor null -parallel null"
	elif [[ -z $serial ]]; then
		display="$display -chardev stdio,id=mux,mux=on,signal=off -device virtio-serial,$virtio_opt -device virtconsole,chardev=mux -serial chardev:mux -monitor chardev:mux"
	fi
fi
if [[ -n $daemon ]]; then
	extra="-daemonize"
fi

if [[ -n $unittest ]]; then
	os="-kernel $HOME/build/kut/x86/x86/$unittest.flat -device pc-testdev -device isa-debug-exit,iobase=0xf4,iosize=0x4 -device pci-testdev"
elif [[ $virtio == "false" || $virtio == "n" ]]; then
	os="-hda $img"
	append="root=/dev/sda1 rootfstype=ext4 $append"
elif [[ $os = "hyper-v" ]]; then
	os="-drive file=$img,if=ide,id=drive"
else
	os="-drive file=$img,if=none,id=drive -device virtio-blk-pci,drive=drive,id=virtblk,$virtio_opt"
	append="root=/dev/vda1 rootfstype=ext4 $append"
fi

if [[ -n $iso ]]; then
	os="$os -drive file=$iso,index=0,media=cdrom -boot d"
elif [[ -n $kernel ]]; then
	append="quiet earlyprintk=ttyS0 net.ifnames=0 $append"
	if [[ $status != "n" ]]; then
		append="$append systemd.show_status=1"
	fi
	if [[ -z $serial ]]; then
		append="console=hvc0 $append"
	else
		append="console=ttyS0 $append"
	fi
	if [[ -z $quiet ]]; then
		append="$append ignore_loglevel"
		if [[ -n $verbose ]]; then
			append="$append systemd.journald.forward_to_console"
		fi
	fi
	append="$append l1tf=off nohpet"
	if [[ $x2apic == "false" || $x2apic == "n" ]]; then
		append="$append noapic"
	fi

	# Generate a unique, but deterministic, machine-id when running nested
	# on devrez, as the source image is identical for L1 and L2, and the
	# machine-id needs to be unique as the MAC for br0 will be derived from
	# the machine-id.
	if [[ $HOSTNAME == "dev-vm" ]]; then
		machine_id=$(sha1sum /etc/machine-id | cut -c -32)
		append="$append systemd.hostname=dev-l2 systemd.machine_id=$machine_id"
	fi

	os="$os -kernel $HOME/build/kernel/$kernel/arch/x86/boot/bzImage"
	if [[ $modules != "false" && $modules != "n" ]]; then
		os="$os -fsdev local,path=$HOME/build/kernel/$kernel/lib/modules,security_model=passthrough,id=p9_modules -device virtio-9p-pci,fsdev=p9_modules,mount_tag=kmodules,$virtio_opt"
	fi
	if [[ $assets != "n" && ($(whoami) != "sean" || $HOSTNAME == "dev-vm") ]]; then
		# p9_images /home/sean/images 9p rw,relatime,access=client,trans=virtio,nofail 0 0
		os="$os -fsdev local,path=$HOME/images,security_model=passthrough,id=p9_images -device virtio-9p-pci,fsdev=p9_images,mount_tag=p9_images,$virtio_opt"

		# Wired up in the guest's /etc/fstab as:
		# p9_build /home/sean/build 9p ro,relatime,access=client,trans=virtio,nofail 0 0
		# p9_go /home/sean/go 9p ro,relatime,access=client,trans=virtio,nofail 0 0
		os="$os -fsdev local,path=$HOME/build,security_model=passthrough,id=p9_build -device virtio-9p-pci,fsdev=p9_build,mount_tag=p9_build,$virtio_opt"
		os="$os -fsdev local,path=$HOME/go,security_model=passthrough,id=p9_go -device virtio-9p-pci,fsdev=p9_go,mount_tag=p9_go,$virtio_opt"
	fi
	if [[ -n $init ]]; then
		os="$os -initrd $HOME/build/initramfs/$init.cpio"
	fi
elif [[ -z $unittest ]]; then
	os="$os -boot c"
fi
if [[ -n $iso1 ]]; then
	os ="$os -drive file=$iso1,index=1,media=cdrom"
fi

if [[ -n $migrate ]]; then
	if [[ $migrate == "src" ]]; then
	migrate=""
	else
	migrate="-incoming tcp:0:$migrate"
	fi
fi

if [[ -n $trace ]]; then
	trace="strace"
else
	trace="exec"
fi

which gcontain
if [[ $? -eq 0 ]]; then
	gcontain enter /
fi

if [[ -n $kernel ]]; then
	$trace $qemu $machine $cpu $bios $mem $display $net $iommu $os $extra -append "$append" $migrate &
else
	$trace $qemu $machine $cpu $bios $mem $display $net $iommu $os $extra $migrate &
fi

qemu_pid=$!

if [[ $pin != "n" && $pin != "p" ]]; then
	(sleep 2; pin_vcpus $qemu_pid $cpus) &
fi

fg 1
