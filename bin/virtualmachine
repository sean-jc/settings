#!/bin/bash
if [[ -z $img && -z $unittest ]]; then
    printf "Must specify the image name via: \$img.\n"
    exit 2
fi

if [[ -z $qemu ]]; then
    printf "Must specify the qemu build via: \$qemu.\n"
    exit 2
fi


if [[ -z $cpus ]]; then
    printf "Must specify the number of cpus via: \$cpus.\n"
    exit 2
fi

if [[ -n $iso && -n $kernel ]]; then
    printf "Cannot specify both \$iso and \$kernel.\n"
    exit 2
fi

if [[ -z $kernel && -n $append ]]; then
    printf "Cannot specify \$append without \$kernel.\n"
    exit 2
fi

if [[ $os = "hyper-v" ]]; then
    mac="00:16:3E:68:00:FF"
else
    mac=$(ifconfig | grep -A 4 br0 | grep -o 00:16:3e:68:00:..)
    if [[ -n $mac ]]; then
        mac="0x$(echo $mac | cut -f 6 -d :)"
        mac=$((mac + 16))
    elif [[ $i386 == "true" ]]; then
        mac="0x80"
    else
        mac="0"
    fi
    mac=$(printf "00:16:3E:68:00:%02x" $((mac + $(ifconfig | grep -c -e "tap[0-9]"))))
fi

if [[ $os = "hyper-v" ]]; then
    img=/home/sean/images/qemu/hyper-v-2016-$img.img
elif [[ $i386 == "true" ]]; then
    img=/home/sean/images/qemu/ubuntu-18.04-server-$img.img
elif [[ $uefi == "false" ]]; then
    img=/home/sean/images/qemu/bios/ubuntu-16.04-server-$img.img
else
    img=/home/sean/images/qemu/ubuntu-16.04-server-$img.img
fi

qemu="/home/sean/build/qemu/$qemu"
qemu_i386=$(readlink -f $qemu | grep i386)
qemu="$qemu -no-reboot"
if [[ -n $gdb ]]; then
    qemu="$qemu -s -S"
fi

ifup=$(which ifup)

net="-device virtio-net-pci,netdev=net0,mac=$mac -netdev tap,id=net0,script=$ifup,downscript=no,vhost=on"

if [[ -n $qemu_i386 ]]; then
    mem="-m 1G"
else
    mem="-m 16G"
    if [[ $(free -g | grep Mem: | tr -s ' ' | cut -f 2 -d ' ') -lt 17 ]]; then
        if [[ $os = "hyper-v" ]]; then
            printf "Not enough memory to start Hyper-V\n"
            exit 2
        fi
        mem="-m 8G"
        if [[ $(free -g | grep Mem: | tr -s ' ' | cut -f 2 -d ' ') -lt 9 ]]; then
            mem="-m 4G"
        fi
    fi
fi
if [[ -n $epc ]]; then
    id=1
    for section in $epc; do
        mem="$mem -object memory-backend-epc,id=mem$id,size=$section -sgx-epc id=epc$id,memdev=mem$id"
        id=$((id+1))
    done
fi

machine="-enable-kvm -smp $cpus -machine q35,accel=kvm,kernel_irqchip"

if [[ $os = "hyper-v" ]]; then
    cpu="-cpu host,host-phys-bits,hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time,+vmx"
else
    cpu="-cpu host,host-phys-bits"
    if [[ -n $qemu_i386 ]]; then
        cpu="$cpu -bios /home/sean/go/src/seabios.org/seabios/out/bios.bin"
    elif [[ $uefi != "false" || $i386 != "true" ]]; then
        if [[ -z $debug_ovmf ]]; then
            cpu="$cpu -bios /home/sean/build/ovmf/OVMF.fd"
        else
            cpu="$cpu -bios /home/sean/go/src/github.com/tianocore/edk2/Build/OvmfX64/DEBUG_GCC5/FV/OVMF.fd -debugcon file:debug.log -global isa-debugcon.iobase=0x402"
        fi
    fi
fi

if [[ $display = "vnc" ]]; then
    display="-vga std -display vnc=:5900"
else
    display="-nographic"
    if [[ $daemon == "true" ]]; then
        display="$display -serial null -monitor null -parallel null"
    elif [[ $hvc == "true" ]]; then
        display="$display -chardev stdio,id=mux,mux=on -device virtio-serial -device virtconsole,chardev=mux -serial null -monitor chardev:mux"
    fi
fi
if [[ $daemon == "true" ]]; then
    extra="-daemonize"
fi

if [[ -n $unittest ]]; then
    os="-kernel /home/sean/go/src/kernel.org/kvm-unit-tests/x86/$unittest.flat -device pc-testdev -device isa-debug-exit,iobase=0xf4,iosize=0x4 -device pci-testdev"
elif [[ $virtio == "false" ]]; then
    os="-hda $img"
    append="root=/dev/sda1 rootfstype=ext4 $append"
else
    os="-drive file=$img,if=virtio"
    append="root=/dev/vda1 rootfstype=ext4 $append"
fi

if [[ -n $iso ]]; then
    os="$os -drive file=$iso,index=0,media=cdrom -boot d"
elif [[ -n $kernel ]]; then
    if [[ $hvc == "true" ]]; then
        append="quiet console=hvc0 earlyprintk=hvc0 net.ifnames=0 $append"
    else
        append="quiet console=tty1 console=ttyS0 earlyprintk=ttyS0 net.ifnames=0 $append"
    fi
    if [[ -n $verbose ]]; then
        append="$append ignore_loglevel"
    fi
    append="$append kvm-intel.nested=1 l1tf=off"
    os="$os -kernel /home/sean/build/kernel/$kernel/arch/x86/boot/bzImage"
    if [[ $modules != "false" ]]; then
        os="$os -virtfs local,path=/home/sean/build/kernel/$kernel/lib/modules,security_model=passthrough,mount_tag=kmodules"
    fi
elif [[ -z $unittest ]]; then
    os="$os -boot c"
fi
if [[ -n $iso1 ]]; then
    os ="$os -drive file=$iso1,index=1,media=cdrom"
fi

if [[ -n $migrate ]]; then
    migrate="-incoming tcp:0:$migrate"
fi

if [[ -n $trace ]]; then
    trace="strace"
fi

if [[ -z $kvm ]]; then
    kvm=kvm_intel
fi
lmod=$(lsmod | cut -f 1 -d ' ' | grep kvm_)
if [[ $? -eq 0 && $lmod != $kvm ]]; then
    sudo rmmod $lmod
fi
sudo modprobe $kvm
sudo modprobe vhost_net

if [[ -n $kernel ]]; then
    sudo -E $trace $qemu $machine $cpu $mem $display $net $os $extra -append "$append" $migrate
else
    sudo -E $trace $qemu $machine $cpu $mem $display $net $os $extra $migrate
fi
