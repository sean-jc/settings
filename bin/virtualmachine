#!/bin/bash
trap "exit 1" TERM
export VM_PID=$$

function die() {
    printf "%s\n" "$1"
    kill -s TERM $VM_PID
}

if [[ -z $img && -z $unittest ]]; then
    die "Must specify the image name via: \$img"
fi

if [[ -z $qemu ]]; then
    die "Must specify the qemu build via: \$qemu"
fi

if [[ -z $cpus ]]; then
    die "Must specify the number of cpus via: \$cpus\n"
fi

if [[ -n $iso && -n $kernel ]]; then
    die "Cannot specify both \$iso and \$kernel\n"
fi

if [[ -z $kernel && -n $append ]]; then
    die "Cannot specify \$append without \$kernel\n"
fi

function psudo() {
    printf "sudo %s\n" "$*"
    sudo $@
}

function config-priv-file() {
    local perm=660
    if [[ $# -eq 2 ]]; then
        perm=$2
    fi

    if [[ ! $(stat $1) ]]; then
        die "Cannot stat $1"
    fi
    if [[ $(grep $(stat -c "%g" $1) /etc/group | cut -f 1 -d :) != "kvm" ]]; then
        psudo chown root:kvm $1
    fi
    if [[ $(stat -c "%a" $1) != "$perm" ]]; then
        psudo chmod $perm $1
    fi
}

if [[ -z $kvm ]]; then
    kvm=kvm_intel
fi
lmod=$(lsmod | cut -f 1 -d ' ' | grep kvm_)
if [[ $? -eq 0 && $lmod != $kvm ]]; then
    psudo rmmod $lmod
fi
if [[ ! $(lsmod | cut -f 1 -d ' ' | grep kvm_) ]]; then
    psudo modprobe $kvm nested=1
fi
if [[ ! $(lsmod | cut -f 1 -d ' ' | grep vhost_net) ]]; then
    psudo modprobe vhost_net
fi

config-priv-file /bin/ip 750
config-priv-file /dev/kvm
config-priv-file /dev/vhost-net
if [[ -n $epc ]]; then
    config-priv-file /dev/sgx/virt_epc
    config-priv-file /dev/sgx/provision
fi

qemu="/home/sean/build/qemu/$qemu"
qemu_bin=$(readlink -f $qemu)

if [[ -z $(getcap $qemu_bin | grep cap_net_admin) ]]; then
    psudo setcap cap_net_admin=+ep $qemu_bin
fi
if [[ -z $(getcap /bin/ip | grep cap_net_admin) ]]; then
    psudo setcap cap_net_admin=+ep /bin/ip
fi

if [[ $os = "hyper-v" ]]; then
    mac="00:16:3E:68:00:FF"
else
    mac=$(ifconfig | grep -A 4 br0 | grep -o 00:16:3e:68:00:..)
    if [[ -n $mac ]]; then
        mac="0x$(echo $mac | cut -f 6 -d :)"
        mac=$((mac + 16))
    elif [[ $i386 == "true" ]]; then
        mac="0x80"
    else
        mac="0"
    fi
    mac=$(printf "00:16:3E:68:00:%02x" $((mac + $(ifconfig | grep -c -e "tap[0-9]"))))
fi

if [[ $os = "hyper-v" ]]; then
    img=/home/sean/images/qemu/hyper-v-2016-$img.img
elif [[ $i386 == "true" ]]; then
    img=/home/sean/images/qemu/ubuntu-18.04-server-$img.img
elif [[ $uefi == "false" ]]; then
    img=/home/sean/images/qemu/bios/ubuntu-16.04-server-$img.img
else
    img=/home/sean/images/qemu/ubuntu-16.04-server-$img.img
fi

qemu="$qemu -no-reboot -name debug-threads=on"
if [[ -n $gdb ]]; then
    qemu="$qemu -s -S"
fi

ifup=$(which ifup)

net="-device virtio-net-pci,netdev=net0,mac=$mac -netdev tap,id=net0,script=$ifup,downscript=no,vhost=on"

maxmem=16G
if [[ -n $epc ]]; then
    maxmem=32G
fi

if [[ "$qemu_bin" =~ "i386" ]]; then
    mem="-m 1G"
elif [[ -n $mem ]]; then
    mem="-m $mem""G"
else
    total_mem=$(free -g | grep Mem: | tr -s ' ' | cut -f 2 -d ' ')
    if [[ $total_mem -lt 5 ]]; then
        printf "Not enough memory to start a VM\n"
        exit 2
    fi
    if [[ $total_mem -lt 17 && $os = "hyper-v" ]]; then
        printf "Not enough memory to start Hyper-V\n"
        exit 2
    fi

    if [[ $total_mem -gt 16 ]]; then
        mem="4G"
        memfd="12G"
    elif [[ $total_mem -gt 8 ]]; then
        mem="4G"
        memfd="4G"
    else
        mem="2G"
        memfd="2G"
    fi
    mem="-m $mem,slots=1,maxmem=$maxmem -object memory-backend-memfd,hugetlb=y,hugetlbsize=2M,id=mem1,size=$memfd -device pc-dimm,id=dimm1,memdev=mem1 "
fi
if [[ -n $epc ]]; then
    id=2
    for section in $epc; do
        mem="$mem -object memory-backend-epc,id=mem$id,size=$section -sgx-epc id=epc$id,memdev=mem$id"
        id=$((id+1))
    done
fi

machine="-enable-kvm -smp $cpus -machine q35,accel=kvm,kernel_irqchip"
if [[ -n $mach ]]; then
    machine="$machine,$mach"
fi

if [[ $os = "hyper-v" ]]; then
    cpu="-cpu host,host-phys-bits,hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time,+vmx"
else
    cpu="-cpu host,host-phys-bits,+invtsc"
    if [[ "$qemu_bin" =~ "i386" ]]; then
        bios="-bios /home/sean/go/src/seabios.org/seabios/out/bios.bin"
    elif [[ $uefi != "false" || $i386 != "true" ]]; then
        if [[ -n $debug_ovmf ]]; then
            bios="-bios /home/sean/go/src/github.com/tianocore/edk2/Build/OvmfX64/DEBUG_GCC5/FV/OVMF.fd -debugcon file:debug.log -global isa-debugcon.iobase=0x402"
        elif [[ $pflash == "true" ]]; then
            bios="-drive if=pflash,format=raw,unit=0,file=/home/sean/build/ovmf/OVMF$ovmf.fd"
        else
            bios="-bios /home/sean/build/ovmf/OVMF$ovmf.fd"
        fi
    fi
fi
if [[ -n $cpuid ]]; then
    cpu="$cpu,$cpuid"
fi

if [[ $display = "vnc" ]]; then
    display="-vga std -display vnc=:5900"
else
    display="-nographic"
    if [[ $daemon == "true" ]]; then
        display="$display -serial null -monitor null -parallel null"
    elif [[ $hvc == "true" ]]; then
        display="$display -chardev stdio,id=mux,mux=on -device virtio-serial -device virtconsole,chardev=mux -serial null -monitor chardev:mux"
    fi
fi
if [[ $daemon == "true" ]]; then
    extra="-daemonize"
fi

if [[ -n $unittest ]]; then
    os="-kernel /home/sean/go/src/kernel.org/kvm-unit-tests/x86/$unittest.flat -device pc-testdev -device isa-debug-exit,iobase=0xf4,iosize=0x4 -device pci-testdev"
elif [[ $virtio == "false" ]]; then
    os="-hda $img"
    append="root=/dev/sda1 rootfstype=ext4 $append"
else
    os="-drive file=$img,if=virtio"
    append="root=/dev/vda1 rootfstype=ext4 $append"
fi

if [[ -n $iso ]]; then
    os="$os -drive file=$iso,index=0,media=cdrom -boot d"
elif [[ -n $kernel ]]; then
    if [[ $hvc == "true" ]]; then
        append="quiet console=hvc0 earlyprintk=hvc0 net.ifnames=0 $append"
    else
        append="quiet console=tty1 console=ttyS0 earlyprintk=ttyS0 net.ifnames=0 $append"
    fi
    if [[ -n $verbose ]]; then
        append="$append ignore_loglevel"
    fi
    append="$append kvm-intel.nested=1 l1tf=off noapic"
    os="$os -kernel /home/sean/build/kernel/$kernel/arch/x86/boot/bzImage"
    if [[ $modules != "false" ]]; then
        os="$os -virtfs local,path=/home/sean/build/kernel/$kernel/lib/modules,security_model=passthrough,mount_tag=kmodules"
    fi
elif [[ -z $unittest ]]; then
    os="$os -boot c"
fi
if [[ -n $iso1 ]]; then
    os ="$os -drive file=$iso1,index=1,media=cdrom"
fi

if [[ -n $migrate ]]; then
    migrate="-incoming tcp:0:$migrate"
fi

if [[ -n $trace ]]; then
    trace="strace"
else
    trace="exec"
fi

if [[ -n $kernel ]]; then
    $trace $qemu $machine $cpu $bios $mem $display $net $os $extra -append "$append" $migrate
else
    $trace $qemu $machine $cpu $bios $mem $display $net $os $extra $migrate
fi
